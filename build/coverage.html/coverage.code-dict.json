{"/home/travis/build/npmtest/node-npmtest-rbac/test.js":"/* istanbul instrument in package npmtest_rbac */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rbac/lib.npmtest_rbac.js":"/* istanbul instrument in package npmtest_rbac */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rbac = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rbac = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rbac/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rbac && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rbac */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rbac\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rbac.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_rbac.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rbac.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_rbac.__dirname + '/lib.npmtest_rbac.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rbac/node_modules/rbac/dist/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mongoose = exports.Memory = exports.Storage = exports.Permission = exports.Role = undefined;\n\nvar _RBAC = require('./RBAC');\n\nvar _RBAC2 = _interopRequireDefault(_RBAC);\n\nvar _Role = require('./Role');\n\nvar _Role2 = _interopRequireDefault(_Role);\n\nvar _Permission = require('./Permission');\n\nvar _Permission2 = _interopRequireDefault(_Permission);\n\nvar _storages = require('./storages');\n\nvar _storages2 = _interopRequireDefault(_storages);\n\nvar _Mongoose = require('./storages/Mongoose');\n\nvar _Mongoose2 = _interopRequireDefault(_Mongoose);\n\nvar _Memory = require('./storages/Memory');\n\nvar _Memory2 = _interopRequireDefault(_Memory);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.Role = _Role2.default;\nexports.Permission = _Permission2.default;\nexports.Storage = _storages2.default;\nexports.Memory = _Memory2.default;\nexports.Mongoose = _Mongoose2.default;\nexports.default = _RBAC2.default;","/home/travis/build/npmtest/node-npmtest-rbac/node_modules/rbac/dist/RBAC.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _isPlainObject = require('lodash/isPlainObject');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nvar _async = require('async');\n\nvar _Role = require('./Role');\n\nvar _Role2 = _interopRequireDefault(_Role);\n\nvar _Permission = require('./Permission');\n\nvar _Permission2 = _interopRequireDefault(_Permission);\n\nvar _Memory = require('./storages/Memory');\n\nvar _Memory2 = _interopRequireDefault(_Memory);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar RBAC = function () {\n  /**\n   * RBAC constructor\n   * @constructor RBAC\n   * @param  {Object} options             Options for RBAC\n   * @param  {Storage}  [options.storage]  Storage of grants\n   * @param  {Array}    [options.roles]            List of role names (String)\n   * @param  {Object}   [options.permissions]      List of permissions\n   * @param  {Object}   [options.grants]           List of grants\n   * @param  {Function} [callback]         Callback function\n   */\n  function RBAC() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n\n    _classCallCheck(this, RBAC);\n\n    options.storage = options.storage || new _Memory2.default();\n\n    this._options = options;\n\n    this.storage.rbac = this;\n\n    var permissions = options.permissions || {};\n    var roles = options.roles || [];\n    var grants = options.grants || {};\n\n    this.create(roles, permissions, grants, function (err) {\n      if (err) {\n        return callback(err);\n      }\n\n      return callback(null, _this);\n    });\n  }\n\n  /**\n   * The RBAC's options.\n   * @member RBAC#options {Object}\n   */\n\n\n  _createClass(RBAC, [{\n    key: 'add',\n\n\n    /**\n     * Register role or permission to actual RBAC instance\n     * @method RBAC#add\n     * @param  {Role|Permission}     item Instance of Base\n     * @param  {Function} cb   Callback function\n     * @return {RBAC}          Return actual instance\n     */\n    value: function add(item, cb) {\n      if (!item) {\n        return cb(new Error('Item is undefined'));\n      }\n\n      if (item.rbac !== this) {\n        return cb(new Error('Item is associated to another RBAC instance'));\n      }\n\n      this.storage.add(item, cb);\n      return this;\n    }\n\n    /**\n     * Get instance of Role or Permission by his name\n     * @method RBAC#get\n     * @param  {String}   name  Name of item\n     * @param  {Function} cb    Callback function\n     * @return {RBAC}           Return instance of actual RBAC\n     */\n\n  }, {\n    key: 'get',\n    value: function get(name, cb) {\n      this.storage.get(name, cb);\n      return this;\n    }\n\n    /**\n     * Remove role or permission from RBAC\n     * @method RBAC#remove\n     * @param  {Role|Permission} item Instance of role or permission\n     * @param  {Function}        cb   Callback function\n     * @return {RBAC}                 Current instance\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(item, cb) {\n      if (!item) {\n        return cb(new Error('Item is undefined'));\n      }\n\n      if (item.rbac !== this) {\n        return cb(new Error('Item is associated to another RBAC instance'));\n      }\n\n      this.storage.remove(item, cb);\n      return this;\n    }\n\n    /**\n     * Remove role or permission from RBAC\n     * @method RBAC#removeByName\n     * @param  {String}   name Name of role or permission\n     * @param  {Function} cb   Callback function\n     * @return {RBAC}          Current instance\n     */\n\n  }, {\n    key: 'removeByName',\n    value: function removeByName(name, cb) {\n      this.get(name, function (err, item) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (!item) {\n          return cb(null, false);\n        }\n\n        item.remove(cb);\n      });\n\n      return this;\n    }\n\n    /**\n     * Grant permission or role to the role\n     * @method RBAC#grant\n     * @param  {Role}            role  Instance of the role\n     * @param  {Role|Permission} child Instance of the role or permission\n     * @param  {Function}        cb    Callback function\n     * @return {RBAC}                  Current instance\n     */\n\n  }, {\n    key: 'grant',\n    value: function grant(role, child, cb) {\n      if (!role || !child) {\n        return cb(new Error('One of item is undefined'));\n      }\n\n      if (role.rbac !== this || child.rbac !== this) {\n        return cb(new Error('Item is associated to another RBAC instance'));\n      }\n\n      if (!RBAC.isRole(role)) {\n        return cb(new Error('Role is not instance of Role'));\n      }\n\n      this.storage.grant(role, child, cb);\n      return this;\n    }\n\n    /**\n     * Revoke permission or role from the role\n     * @method RBAC#revoke\n     * @param  {Role}            role   Instance of the role\n     * @param  {Role|Permission} child  Instance of the role or permission\n     * @param  {Function}        cb     Callback function\n     * @return {RBAC}                   Current instance\n     */\n\n  }, {\n    key: 'revoke',\n    value: function revoke(role, child, cb) {\n      if (!role || !child) {\n        return cb(new Error('One of item is undefined'));\n      }\n\n      if (role.rbac !== this || child.rbac !== this) {\n        return cb(new Error('Item is associated to another RBAC instance'));\n      }\n\n      this.storage.revoke(role, child, cb);\n      return this;\n    }\n\n    /**\n     * Revoke permission or role from the role by names\n     * @method RBAC#revokeByName\n     * @param  {String}   roleName  Instance of the role\n     * @param  {String}   childName Instance of the role or permission\n     * @param  {Function} cb        Callback function\n     * @return {RBAC}               Current instance\n     */\n\n  }, {\n    key: 'revokeByName',\n    value: function revokeByName(roleName, childName, cb) {\n      var _this2 = this;\n\n      (0, _async.parallel)({\n        role: function role(callback) {\n          return _this2.get(roleName, callback);\n        },\n        child: function child(callback) {\n          return _this2.get(childName, callback);\n        }\n      }, function (err, results) {\n        if (err) {\n          return cb(err);\n        }\n\n        _this2.revoke(results.role, results.child, cb);\n      });\n\n      return this;\n    }\n\n    /**\n     * Grant permission or role from the role by names\n     * @method RBAC#grantByName\n     * @param  {String}   roleName  Instance of the role\n     * @param  {String}   childName Instance of the role or permission\n     * @param  {Function} cb        Callback function\n     * @return {RBAC}               Current instance\n     */\n\n  }, {\n    key: 'grantByName',\n    value: function grantByName(roleName, childName, cb) {\n      var _this3 = this;\n\n      (0, _async.parallel)({\n        role: function role(callback) {\n          return _this3.get(roleName, callback);\n        },\n        child: function child(callback) {\n          return _this3.get(childName, callback);\n        }\n      }, function (err, results) {\n        if (err) {\n          return cb(err);\n        }\n\n        _this3.grant(results.role, results.child, cb);\n      });\n\n      return this;\n    }\n\n    /**\n     * Create a new role assigned to actual instance of RBAC\n     * @method RBAC#createRole\n     * @param  {String}  roleName Name of new Role\n     * @param  {Boolean} [add=true]    True if you need to add it to the storage\n     * @return {Role}    Instance of the Role\n     */\n\n  }, {\n    key: 'createRole',\n    value: function createRole(roleName, add, cb) {\n      return new _Role2.default(this, roleName, add, cb);\n    }\n\n    /**\n     * Create a new permission assigned to actual instance of RBAC\n     * @method RBAC#createPermission\n     * @param  {String} action   Name of action\n     * @param  {String} resource Name of resource\n     * @param  {Boolean} [add=true]   True if you need to add it to the storage\n     * @param  {Function} cb     Callback function\n     * @return {Permission}      Instance of the Permission\n     */\n\n  }, {\n    key: 'createPermission',\n    value: function createPermission(action, resource, add, cb) {\n      return new _Permission2.default(this, action, resource, add, cb);\n    }\n\n    /**\n     * Callback returns true if role or permission exists\n     * @method RBAC#exists\n     * @param  {String}   name  Name of item\n     * @param  {Function} cb    Callback function\n     * @return {RBAC}           Return instance of actual RBAC\n     */\n\n  }, {\n    key: 'exists',\n    value: function exists(name, cb) {\n      this.storage.exists(name, cb);\n      return this;\n    }\n\n    /**\n     * Callback returns true if role exists\n     * @method RBAC#existsRole\n     * @param  {String}   name  Name of item\n     * @param  {Function} cb    Callback function\n     * @return {RBAC}           Return instance of actual RBAC\n     */\n\n  }, {\n    key: 'existsRole',\n    value: function existsRole(name, cb) {\n      this.storage.existsRole(name, cb);\n      return this;\n    }\n\n    /**\n     * Callback returns true if permission exists\n     * @method RBAC#existsPermission\n     * @param  {String}   action  Name of action\n     * @param  {String}   resource  Name of resource\n     * @param  {Function} cb    Callback function\n     * @return {RBAC}           Return instance of actual RBAC\n     */\n\n  }, {\n    key: 'existsPermission',\n    value: function existsPermission(action, resource, cb) {\n      this.storage.existsPermission(action, resource, cb);\n      return this;\n    }\n\n    /**\n     * Return instance of Role by his name\n     * @method RBAC#getRole\n     * @param  {String}   name  Name of role\n     * @param  {Function} cb    Callback function\n     * @return {RBAC}           Return instance of actual RBAC\n     */\n\n  }, {\n    key: 'getRole',\n    value: function getRole(name, cb) {\n      this.storage.getRole(name, cb);\n      return this;\n    }\n\n    /**\n     * Return all instances of Role\n     * @method RBAC#getRoles\n     * @param  {Function} cb    Callback function\n     * @return {RBAC}           Return instance of actual RBAC\n     */\n\n  }, {\n    key: 'getRoles',\n    value: function getRoles(cb) {\n      this.storage.getRoles(cb);\n      return this;\n    }\n\n    /**\n     * Return instance of Permission by his action and resource\n     * @method RBAC#getPermission\n     * @param  {String} action    Name of action\n     * @param  {String} resource  Name of resource\n     * @param  {Function} cb      Callback function\n     * @return {RBAC}             Return instance of actual RBAC\n     */\n\n  }, {\n    key: 'getPermission',\n    value: function getPermission(action, resource, cb) {\n      this.storage.getPermission(action, resource, cb);\n      return this;\n    }\n\n    /**\n     * Return instance of Permission by his name\n     * @method RBAC#getPermission\n     * @param  {String} name      Name of permission\n     * @param  {Function} cb      Callback function\n     * @return {RBAC}             Return instance of actual RBAC\n     */\n\n  }, {\n    key: 'getPermissionByName',\n    value: function getPermissionByName(name, cb) {\n      var data = _Permission2.default.decodeName(name);\n      this.storage.getPermission(data.action, data.resource, cb);\n      return this;\n    }\n\n    /**\n     * Return all instances of Permission\n     * @method RBAC#getPermissions\n     * @param  {Function} cb    Callback function\n     * @return {RBAC}           Return instance of actual RBAC\n     */\n\n  }, {\n    key: 'getPermissions',\n    value: function getPermissions(cb) {\n      this.storage.getPermissions(cb);\n      return this;\n    }\n\n    /**\n     * Create multiple permissions in one step\n     * @method RBAC#createPermissions\n     * @param  {Object}   permissions Object of permissions\n     * @param  {Boolean} [add=true]   True if you need to add it to the storage\n     * @param  {Function} cb          Callbck function\n     * @return {RBAC}                 Instance of actual RBAC\n     */\n\n  }, {\n    key: 'createPermissions',\n    value: function createPermissions(resources, add, cb) {\n      var _this4 = this;\n\n      if (typeof add === 'function') {\n        return this.createPermissions(resources, true, add);\n      }\n\n      var tasks = {};\n\n      if (!(0, _isPlainObject2.default)(resources)) {\n        return cb(new Error('Resources is not a plain object'));\n      }\n\n      Object.keys(resources).forEach(function (resource) {\n        resources[resource].forEach(function (action) {\n          var name = _Permission2.default.createName(action, resource);\n          tasks[name] = function (callback) {\n            return _this4.createPermission(action, resource, add, callback);\n          };\n        }, _this4);\n      }, this);\n\n      (0, _async.parallel)(tasks, cb);\n      return this;\n    }\n\n    /**\n     * Create multiple roles in one step assigned to actual instance of RBAC\n     * @method RBAC#createRoles\n     * @param  {Array}    roleNames  Array of role names\n     * @param  {Boolean} [add=true]   True if you need to add it to the storage\n     * @param  {Function} cb         Callback function\n     * @return {RBAC}                Current instance\n     */\n\n  }, {\n    key: 'createRoles',\n    value: function createRoles(roleNames, add, cb) {\n      var _this5 = this;\n\n      if (typeof add === 'function') {\n        return this.createRoles(roleNames, true, add);\n      }\n\n      var tasks = {};\n\n      roleNames.forEach(function (roleName) {\n        tasks[roleName] = function (callback) {\n          return _this5.createRole(roleName, add, callback);\n        };\n      }, this);\n\n      (0, _async.parallel)(tasks, cb);\n      return this;\n    }\n\n    /**\n     * Grant multiple items in one function\n     * @method RBAC#grants\n     * @param  {Object}       List of roles\n     * @param  {Function} cb  Callback function\n     * @return {RBAC}         Current instance\n     */\n\n  }, {\n    key: 'grants',\n    value: function grants(roles, cb) {\n      var _this6 = this;\n\n      if (!(0, _isPlainObject2.default)(roles)) {\n        return cb(new Error('Grants is not a plain object'));\n      }\n\n      var tasks = [];\n\n      Object.keys(roles).forEach(function (role) {\n        roles[role].forEach(function (grant) {\n          tasks.push(function (callback) {\n            return _this6.grantByName(role, grant, callback);\n          });\n        }, _this6);\n      }, this);\n\n      (0, _async.parallel)(tasks, cb);\n      return this;\n    }\n\n    /**\n     * Create multiple permissions and roles in one step\n     * @method RBAC#create\n     * @param  {Array}   roleNames       List of role names\n     * @param  {Object}  permissionNames List of permission names\n     * @param  {Object}  [grants]        List of grants\n     * @param  {Array}   cb              Callback function\n     * @return {RBAC}                    Instance of actual RBAC\n     */\n\n  }, {\n    key: 'create',\n    value: function create(roleNames, permissionNames, grants, cb) {\n      var _this7 = this;\n\n      if (typeof grants === 'function') {\n        return this.create(roleNames, permissionNames, null, grants);\n      }\n\n      var tasks = {\n        permissions: function permissions(callback) {\n          return _this7.createPermissions(permissionNames, callback);\n        },\n        roles: function roles(callback) {\n          return _this7.createRoles(roleNames, callback);\n        }\n      };\n\n      (0, _async.parallel)(tasks, function (err, result) {\n        if (err || !grants) {\n          return cb(err, result);\n        }\n\n        // add grants to roles\n        _this7.grants(grants, function (err2) {\n          if (err2) {\n            return cb(err2);\n          }\n\n          cb(null, result);\n        });\n      });\n\n      return this;\n    }\n\n    /**\n     * Traverse hierarchy of roles.\n     * Callback function returns as second parameter item from hierarchy or null if we are on the end of hierarchy.\n     * @method RBAC#_traverseGrants\n     * @param  {String}   roleName  Name of role\n     * @param  {Function} cb        Callback function\n     * @return {RBAC}               Return instance of actual RBAC\n     * @private\n     */\n\n  }, {\n    key: '_traverseGrants',\n    value: function _traverseGrants(roleName, cb) {\n      var _this8 = this;\n\n      var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [roleName];\n      var used = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var actualRole = next.shift();\n      used[actualRole] = true;\n\n      this.storage.getGrants(actualRole, function (err) {\n        var items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n        if (err) {\n          return cb(err);\n        }\n\n        for (var i = 0; i < items.length; i++) {\n          var item = items[i];\n          var name = item.name;\n\n          if (RBAC.isRole(item) && !used[name]) {\n            used[name] = true;\n            next.push(name);\n          }\n\n          if (cb(null, item) === false) {\n            return void 0;\n          }\n        }\n\n        if (next.length === 0) {\n          return cb(null, null);\n        }\n\n        _this8._traverseGrants(null, cb, next, used);\n      });\n\n      return this;\n    }\n\n    /**\n     * Return true if role has allowed permission\n     * @method RBAC#can\n     * @param  {String}  roleName Name of role\n     * @param  {String}  action   Name of action\n     * @param  {String}  resource Name of resource\n     * @param  {Function} cb        Callback function\n     * @return {RBAC}             Current instance\n     */\n\n  }, {\n    key: 'can',\n    value: function can(roleName, action, resource, cb) {\n      this._traverseGrants(roleName, function (err, item) {\n        // if there is a error\n        if (err) {\n          return cb(err);\n        }\n\n        // this is last item\n        if (!item) {\n          return cb(null, false);\n        }\n\n        if (RBAC.isPermission(item) && item.can(action, resource) === true) {\n          cb(null, true);\n          // end up actual traversing\n          return false;\n        }\n      });\n\n      return this;\n    }\n\n    /**\n     * Check if the role has any of the given permissions.\n     * @method RBAC#canAny\n     * @param  {String} roleName     Name of role\n     * @param  {Array}  permissions  Array (String action, String resource)\n     * @param  {Function} cb        Callback function\n     * @return {RBAC}                Current instance\n     */\n\n  }, {\n    key: 'canAny',\n    value: function canAny(roleName, permissions, cb) {\n      // prepare the names of permissions\n      var permissionNames = RBAC.getPermissionNames(permissions);\n\n      // traverse hierarchy\n      this._traverseGrants(roleName, function (err, item) {\n        // if there is a error\n        if (err) {\n          return cb(err);\n        }\n\n        // this is last item\n        if (!item) {\n          return cb(null, false);\n        }\n\n        if (RBAC.isPermission(item) && permissionNames.indexOf(item.name) !== -1) {\n          cb(null, true);\n          // end up actual traversing\n          return false;\n        }\n      });\n\n      return this;\n    }\n\n    /**\n     * Check if the model has all of the given permissions.\n     * @method RBAC#canAll\n     * @param  {String} roleName     Name of role\n     * @param  {Array}  permissions  Array (String action, String resource)\n     * @param  {Function} cb        Callback function\n     * @return {RBAC}                Current instance\n     */\n\n  }, {\n    key: 'canAll',\n    value: function canAll(roleName, permissions, cb) {\n      // prepare the names of permissions\n      var permissionNames = RBAC.getPermissionNames(permissions);\n      var founded = {};\n      var foundedCount = 0;\n\n      // traverse hierarchy\n      this._traverseGrants(roleName, function (err, item) {\n        // if there is a error\n        if (err) {\n          return cb(err);\n        }\n\n        // this is last item\n        if (!item) {\n          return cb(null, false);\n        }\n\n        if (RBAC.isPermission(item) && permissionNames.indexOf(item.name) !== -1 && !founded[item.name]) {\n          founded[item.name] = true;\n          foundedCount++;\n\n          if (foundedCount === permissionNames.length) {\n            cb(null, true);\n            // end up actual traversing\n            return false;\n          }\n        }\n      });\n\n      return this;\n    }\n\n    /**\n     * Return true if role has allowed permission\n     * @method RBAC#hasRole\n     * @param  {String}   roleName        Name of role\n     * @param  {String}   roleChildName   Name of child role\n     * @param  {Function} cb              Callback function\n     * @return {RBAC}                     Current instance\n     */\n\n  }, {\n    key: 'hasRole',\n    value: function hasRole(roleName, roleChildName, cb) {\n      if (roleName === roleChildName) {\n        cb(null, true);\n        return this;\n      }\n\n      this._traverseGrants(roleName, function (err, item) {\n        // if there is a error\n        if (err) {\n          return cb(err);\n        }\n\n        // this is last item\n        if (!item) {\n          return cb(null, false);\n        }\n\n        if (RBAC.isRole(item) && item.name === roleChildName) {\n          cb(null, true);\n          // end up actual traversing\n          return false;\n        }\n      });\n\n      return this;\n    }\n\n    /**\n     * Return array of all permission assigned to role of RBAC\n     * @method RBAC#getScope\n     * @param  {String} roleName   Name of role\n     * @param  {Function} cb       Callback function\n     * @return {RBAC}              Current instance\n     */\n\n  }, {\n    key: 'getScope',\n    value: function getScope(roleName, cb) {\n      var scope = [];\n\n      // traverse hierarchy\n      this._traverseGrants(roleName, function (err, item) {\n        // if there is a error\n        if (err) {\n          return cb(err);\n        }\n\n        // this is last item\n        if (!item) {\n          return cb(null, scope);\n        }\n\n        if (RBAC.isPermission(item) && scope.indexOf(item.name) === -1) {\n          scope.push(item.name);\n        }\n      });\n\n      return this;\n    }\n\n    /**\n     * Convert Array of permissions to permission name\n     * @function getPermissionNames\n     * @memberof RBAC\n     * @param  {Array} permissions List of array items of permission names. It contan action and resource\n     * @return {Array}             List of permission names\n     * @static\n     */\n\n  }, {\n    key: 'options',\n    get: function get() {\n      return this._options;\n    }\n\n    /**\n     * The RBAC's storage.\n     * @member RBAC#storage {Storage}\n     */\n\n  }, {\n    key: 'storage',\n    get: function get() {\n      return this.options.storage;\n    }\n  }], [{\n    key: 'getPermissionNames',\n    value: function getPermissionNames(permissions) {\n      var permissionNames = [];\n\n      for (var i = 0; i < permissions.length; i++) {\n        var permission = permissions[i];\n        permissionNames.push(_Permission2.default.createName(permission[0], permission[1]));\n      }\n\n      return permissionNames;\n    }\n  }, {\n    key: 'isPermission',\n    value: function isPermission(item) {\n      return item instanceof _Permission2.default;\n    }\n  }, {\n    key: 'isRole',\n    value: function isRole(item) {\n      return item instanceof _Role2.default;\n    }\n  }]);\n\n  return RBAC;\n}();\n\nexports.default = RBAC;","/home/travis/build/npmtest/node-npmtest-rbac/node_modules/rbac/dist/Role.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Base2 = require('./Base');\n\nvar _Base3 = _interopRequireDefault(_Base2);\n\nvar _Permission = require('./Permission');\n\nvar _Permission2 = _interopRequireDefault(_Permission);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Role = function (_Base) {\n  _inherits(Role, _Base);\n\n  /**\n   * Role constructor\n   * @constructor Role\n   * @extends {Base}\n   * @param  {RBAC}     rbac       Instance of the RBAC\n   * @param  {String}   name       Name of the role\n   * @param  {Boolean}  [add=true] True if you need to save it to storage\n   * @param  {Function} cb         Callback function after add\n   */\n  function Role(rbac, name, add, cb) {\n    _classCallCheck(this, Role);\n\n    if (typeof add === 'function') {\n      cb = add;\n      add = true;\n    }\n\n    if (!_Permission2.default.isValidName(name)) {\n      var _ret;\n\n      return _ret = cb(new Error('Role has no valid name')), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return _possibleConstructorReturn(this, (Role.__proto__ || Object.getPrototypeOf(Role)).call(this, rbac, name, add, cb));\n  }\n\n  /**\n   * Add role or permission to current role\n   * @method Role#grant\n   * @param  {Role|Permission} item Instance of role or permission\n   * @param  {Function} cb          Callback function\n   * @return {Role}                 Return current instance of role\n   */\n\n\n  _createClass(Role, [{\n    key: 'grant',\n    value: function grant(item, cb) {\n      this.rbac.grant(this, item, cb);\n      return this;\n    }\n\n    /**\n     * Remove role or permission from current role\n     * @method Role#revoke\n     * @param  {Role|Permission} item Instance of role or permission\n     * @param  {Function} cb          Callback function\n     * @return {Role}                 Return current instance of role\n     */\n\n  }, {\n    key: 'revoke',\n    value: function revoke(item, cb) {\n      this.rbac.revoke(this, item, cb);\n      return this;\n    }\n\n    /**\n     * Return true if contains permission\n     * @method Role#can\n     * @param  {String}  action   Name of action\n     * @param  {String}  resource Name of resource\n     * @param  {Function} cb      Callback function\n     * @return {Role}             Return current instance of role\n     */\n\n  }, {\n    key: 'can',\n    value: function can(action, resource, cb) {\n      this.rbac.can(this.name, action, resource, cb);\n      return this;\n    }\n\n    /**\n     * Check if the role has any of the given permissions\n     * @method Role#canAny\n     * @param  {Array} permissions  List of permissions. Each has structure (String action, String resource)\n     * @param  {Function} cb      Callback function\n     * @return {Role}               Return current instance of role\n     */\n\n  }, {\n    key: 'canAny',\n    value: function canAny(permissions, cb) {\n      this.rbac.canAny(this.name, permissions, cb);\n      return this;\n    }\n\n    /**\n     * Check if the model has all of the given permissions\n     * @method Role#canAll\n     * @param  {Array}  permissions List of permissions. Each has structure (String action, String resource)\n     * @param  {Function} cb      Callback function\n     * @return {Role}               Return current instance of role\n     */\n\n  }, {\n    key: 'canAll',\n    value: function canAll(permissions, cb) {\n      this.rbac.canAll(this.name, permissions, cb);\n      return this;\n    }\n\n    /**\n     * Return true if the current role contains the specified role name\n     * @method Role#hasRole\n     * @param  {String} roleChildName Name of role\n     * @param  {Function} cb          Callback function\n     * @return {Role}                 Return current instance of role\n     */\n\n  }, {\n    key: 'hasRole',\n    value: function hasRole(roleChildName, cb) {\n      this.rbac.hasRole(this.name, roleChildName, cb);\n      return this;\n    }\n\n    /**\n     * Return array of permission assigned to actual role\n     * @method Role#getScope\n     * @param  {Function} cb  Callback function\n     * @return {Role}         Return current instance of role\n     */\n\n  }, {\n    key: 'getScope',\n    value: function getScope(cb) {\n      this.rbac.getScope(this.name, cb);\n      return this;\n    }\n  }]);\n\n  return Role;\n}(_Base3.default);\n\nexports.default = Role;","/home/travis/build/npmtest/node-npmtest-rbac/node_modules/rbac/dist/Base.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Base = function () {\n  /**\n   * Base constructor\n   * @constructor Base\n   * @param  {RBAC}     rbac     Instance of the RBAC\n   * @param  {String}   name     Name of the grant\n   * @param  {Boolean}  add      True if you need to save it to storage\n   * @param  {Function} cb       Callback function after add\n   */\n  function Base(rbac, name, add, cb) {\n    var _this = this;\n\n    _classCallCheck(this, Base);\n\n    if (!rbac || !name || typeof cb !== 'function') {\n      return cb(new Error('One of parameters is undefined'));\n    }\n\n    this._name = name;\n    this._rbac = rbac;\n\n    if (!add) {\n      return cb(null, this);\n    }\n\n    rbac.add(this, function (err) {\n      return cb(err, _this);\n    });\n  }\n\n  /**\n   * Get name of actual instance\n   * @member Base#name {String}\n   */\n\n\n  _createClass(Base, [{\n    key: 'remove',\n\n\n    /**\n     * Remove this from RBAC (storage)\n     * @method Base#remove\n     * @param  {Function} cb Callback function\n     * @return {Base}\n     */\n    value: function remove(cb) {\n      this.rbac.remove(this, cb);\n      return this;\n    }\n  }, {\n    key: 'name',\n    get: function get() {\n      return this._name;\n    }\n\n    /**\n     * Get instance of RBAC\n     * @member Base#rbac {RBAC|null} Instance of RBAC\n     */\n\n  }, {\n    key: 'rbac',\n    get: function get() {\n      return this._rbac;\n    }\n  }]);\n\n  return Base;\n}();\n\nexports.default = Base;","/home/travis/build/npmtest/node-npmtest-rbac/node_modules/rbac/dist/Permission.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DELIMITER = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Base2 = require('./Base');\n\nvar _Base3 = _interopRequireDefault(_Base2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DELIMITER = exports.DELIMITER = '_';\n\nvar Permission = function (_Base) {\n  _inherits(Permission, _Base);\n\n  /**\n   * Permission constructor\n   * @constructor Permission\n   * @extends {Base}\n   * @param  {RBAC}     rbac       Instance of the RBAC\n   * @param  {String}   action     Name of the action\n   * @param  {String}   resource   Name of the resource\n   * @param  {Boolean}  [add=true] True if you need to save it to storage\n   * @param  {Function} cb         Callback function after add\n   */\n  function Permission(rbac, action, resource, add, cb) {\n    _classCallCheck(this, Permission);\n\n    if (typeof add === 'function') {\n      cb = add;\n      add = true;\n    }\n\n    if (!action || !resource) {\n      var _ret;\n\n      return _ret = cb(new Error('One of parameters is undefined')), _possibleConstructorReturn(_this, _ret);\n    }\n\n    if (!Permission.isValidName(action) || !Permission.isValidName(resource)) {\n      var _ret2;\n\n      return _ret2 = cb(new Error('Action or resource has no valid name')), _possibleConstructorReturn(_this, _ret2);\n    }\n\n    return _possibleConstructorReturn(this, (Permission.__proto__ || Object.getPrototypeOf(Permission)).call(this, rbac, Permission.createName(action, resource), add, cb));\n  }\n\n  /**\n   * Get action name of actual permission\n   * @member Permission#action {String} Action of permission\n   */\n\n\n  _createClass(Permission, [{\n    key: 'can',\n\n\n    /**\n     * Return true if has same action and resource\n     * @method Permission#can\n     * @param  {String}  action   Name of action\n     * @param  {String}  resource Name of resource\n     * @return {Boolean}\n     */\n    value: function can(action, resource) {\n      return this.action === action && this.resource === resource;\n    }\n\n    /**\n     * Compute name of permission from action and resource\n     * @function createName\n     * @memberof Permission\n     * @param  {String} action   Name of permission\n     * @param  {String} resource Resource of permission\n     * @return {String}          Computed name of permission\n     * @static\n     */\n\n  }, {\n    key: 'action',\n    get: function get() {\n      if (!this._action) {\n        var decoded = Permission.decodeName(this.name);\n        if (!decoded) {\n          throw new Error('Action is null');\n        }\n\n        this._action = decoded.action;\n      }\n\n      return this._action;\n    }\n\n    /**\n     * Get resource name of actual permission\n     * @member Permission#resource {String} Resource of permission\n     */\n\n  }, {\n    key: 'resource',\n    get: function get() {\n      if (!this._resource) {\n        var decoded = Permission.decodeName(this.name);\n        if (!decoded) {\n          throw new Error('Resource is null');\n        }\n\n        this._resource = decoded.resource;\n      }\n\n      return this._resource;\n    }\n  }], [{\n    key: 'createName',\n    value: function createName(action, resource) {\n      return action + DELIMITER + resource;\n    }\n  }, {\n    key: 'decodeName',\n    value: function decodeName(name) {\n      var pos = name.indexOf(DELIMITER);\n      if (pos === -1) {\n        return null;\n      }\n\n      return {\n        action: name.substr(0, pos),\n        resource: name.substr(pos + 1)\n      };\n    }\n\n    /**\n     * Correct name can not contain whitespace or underscores.\n     * @function isValidName\n     * @memberof Permission\n     * @param  {String}  name Name\n     * @return {Boolean}\n     * @static\n     */\n\n  }, {\n    key: 'isValidName',\n    value: function isValidName(name) {\n      var exp = new RegExp('^[^' + DELIMITER + '\\\\s]+$');\n      return exp.test(name);\n    }\n  }]);\n\n  return Permission;\n}(_Base3.default);\n\nexports.default = Permission;","/home/travis/build/npmtest/node-npmtest-rbac/node_modules/rbac/dist/storages/Memory.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _index = require('./index');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _Permission = require('../Permission');\n\nvar _Permission2 = _interopRequireDefault(_Permission);\n\nvar _Role = require('../Role');\n\nvar _Role2 = _interopRequireDefault(_Role);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Memory = function (_Storage) {\n  _inherits(Memory, _Storage);\n\n  function Memory() {\n    _classCallCheck(this, Memory);\n\n    var _this = _possibleConstructorReturn(this, (Memory.__proto__ || Object.getPrototypeOf(Memory)).call(this));\n\n    _this._items = {};\n    return _this;\n  }\n\n  _createClass(Memory, [{\n    key: 'add',\n    value: function add(item, cb) {\n      var name = item.name;\n      if (this._items[name]) {\n        return cb(null, this._items[name].item);\n      }\n\n      this._items[name] = {\n        instance: item,\n        grants: []\n      };\n\n      cb(null, item);\n      return this;\n    }\n  }, {\n    key: 'remove',\n    value: function remove(item, cb) {\n      var name = item.name;\n      if (!this._items[name]) {\n        return cb(new Error('Item is not presented in storage'));\n      }\n\n      // revoke from all instances\n      for (var index in this._items) {\n        if (!this._items.hasOwnProperty(index)) {\n          continue;\n        }\n\n        var grants = this._items[index].grants;\n\n        for (var i = 0; i < grants.length; i++) {\n          if (grants[i] === name) {\n            grants.splice(i, 1);\n            break;\n          }\n        }\n      }\n\n      // delete from items\n      delete this._items[name];\n\n      cb(null, true);\n      return this;\n    }\n  }, {\n    key: 'grant',\n    value: function grant(role, child, cb) {\n      var name = role.name;\n      var childName = child.name;\n\n      if (!this._items[name] || !this._items[childName]) {\n        return cb(new Error('Role is not exist'));\n      }\n\n      if (!role instanceof _Role2.default) {\n        return cb(new Error('Role is not instance of Role'));\n      }\n\n      if (name === childName) {\n        return cb(new Error('You can grant yourself'));\n      }\n\n      var grants = this._items[name].grants;\n      for (var i = 0; i < grants.length; i++) {\n        var grant = grants[i];\n\n        if (grant === childName) {\n          return cb(null, true);\n        }\n      }\n\n      grants.push(childName);\n      cb(null, true);\n      return this;\n    }\n  }, {\n    key: 'revoke',\n    value: function revoke(role, child, cb) {\n      var name = role.name;\n      var childName = child.name;\n\n      if (!this._items[name] || !this._items[childName]) {\n        return cb(new Error('Role is not exist'));\n      }\n\n      var grants = this._items[name].grants;\n      for (var i = 0; i < grants.length; i++) {\n        var grant = grants[i];\n\n        if (grant === childName) {\n          grants.splice(i, 1);\n          return cb(null, true);\n        }\n      }\n\n      cb(new Error('Item is not associated to this item'));\n      return this;\n    }\n  }, {\n    key: 'get',\n    value: function get(name, cb) {\n      if (!name || !this._items[name]) {\n        return cb(null, null);\n      }\n\n      cb(null, this._items[name].instance);\n      return this;\n    }\n  }, {\n    key: 'getRoles',\n    value: function getRoles(cb) {\n      var items = [];\n\n      for (var name in this._items) {\n        if (!this._items.hasOwnProperty(name)) {\n          continue;\n        }\n\n        var item = this._items[name].instance;\n\n        if (item instanceof _Role2.default) {\n          items.push(item);\n        }\n      }\n\n      cb(null, items);\n      return this;\n    }\n  }, {\n    key: 'getPermissions',\n    value: function getPermissions(cb) {\n      var items = [];\n\n      for (var name in this._items) {\n        if (!this._items.hasOwnProperty(name)) {\n          continue;\n        }\n\n        var item = this._items[name].instance;\n\n        if (item instanceof _Permission2.default) {\n          items.push(item);\n        }\n      }\n\n      cb(null, items);\n      return this;\n    }\n  }, {\n    key: 'getGrants',\n    value: function getGrants(role, cb) {\n      if (!role || !this._items[role]) {\n        return cb(null, null);\n      }\n\n      var roleGrants = this._items[role].grants;\n\n      var grants = [];\n      for (var i = 0; i < roleGrants.length; i++) {\n        var grantName = roleGrants[i];\n        var grant = this._items[grantName];\n        if (!grant) {\n          continue;\n        }\n\n        grants.push(grant.instance);\n      }\n\n      cb(null, grants);\n      return this;\n    }\n  }]);\n\n  return Memory;\n}(_index2.default);\n\nexports.default = Memory;","/home/travis/build/npmtest/node-npmtest-rbac/node_modules/rbac/dist/storages/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Permission = require('../Permission');\n\nvar _Permission2 = _interopRequireDefault(_Permission);\n\nvar _Role = require('../Role');\n\nvar _Role2 = _interopRequireDefault(_Role);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Storage = function () {\n  /**\n   * Storage constructor\n   * @constructor Storage\n   */\n  function Storage() {\n    _classCallCheck(this, Storage);\n\n    this._rbac = null;\n  }\n\n  /**\n   * Get instance of RBAC\n   * @member Storage#rbac {RBAC|null} Instance of RBAC\n   */\n\n\n  _createClass(Storage, [{\n    key: 'add',\n\n\n    /**\n     * Add permission or role\n     * @method Storage#add\n     * @param {Base}   item    Instance of role or permission\n     * @param  {Function} cb   Callback function\n     * @return {Storage}       Instance of actual storage\n     */\n    value: function add(item, cb) {\n      cb(new Error('Storage method add is not implemented'));\n    }\n\n    /**\n     * Remove permission or role\n     * @method Storage#remove\n     * @param {Base}   item    Instance of role or permission\n     * @param  {Function} cb   Callback function\n     * @return {Storage}       Instance of actual storage\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(item, cb) {\n      cb(new Error('Storage method remove is not implemented'));\n    }\n\n    /**\n     * Add (grant) permission or role to hierarchy of actual role\n     * @method Storage#grant\n     * @param  {Role}   role  Instance of role\n     * @param  {Base}   child Instance of role or permission\n     * @param  {Function} cb    Callback function\n     * @return {Storage}       Instance of actual storage\n     */\n\n  }, {\n    key: 'grant',\n    value: function grant(role, child, cb) {\n      cb(new Error('Storage method grant is not implemented'));\n    }\n\n    /**\n     * Remove (revoke) permission or role from hierarchy of actual role\n     * @method Storage#revoke\n     * @param  {Role}   role  Instance of role\n     * @param  {Base}   child Instance of role or permission\n     * @param  {Function} cb    Callback function\n     * @return {Storage}       Instance of actual storage\n     */\n\n  }, {\n    key: 'revoke',\n    value: function revoke(role, child, cb) {\n      cb(new Error('Storage method revoke is not implemented'));\n    }\n\n    /**\n     * Get instance of permission or role by his name\n     * @method Storage#get\n     * @param  {String}   name Name of role or permission\n     * @param  {Function} cb   Callback function\n     * @return {Storage}       Instance of actual storage\n     */\n\n  }, {\n    key: 'get',\n    value: function get(name, cb) {\n      cb(new Error('Storage method get is not implemented'));\n    }\n\n    /**\n     * Get all instances of Roles\n     * @method Storage#getRoles\n     * @param  {Function} cb   Callback function\n     * @return {Storage}       Instance of actual storage\n     */\n\n  }, {\n    key: 'getRoles',\n    value: function getRoles(cb) {\n      cb(new Error('Storage method getRoles is not implemented'));\n    }\n\n    /**\n     * Get all instances of Permissions\n     * @method Storage#getPermissions\n     * @param  {Function} cb   Callback function\n     * @return {Storage}       Instance of actual storage\n     */\n\n  }, {\n    key: 'getPermissions',\n    value: function getPermissions(cb) {\n      cb(new Error('Storage method getPermissions is not implemented'));\n    }\n\n    /**\n     * Get instances of Roles and Permissions assigned to role\n     * @method Storage#getGrants\n     * @param  {String}   role Name of role\n     * @param  {Function} cb   Callback function\n     * @return {Storage}       Instance of actual storage\n     */\n\n  }, {\n    key: 'getGrants',\n    value: function getGrants(role, cb) {\n      cb(new Error('Storage method getGrants is not implemented'));\n    }\n\n    /**\n     * Get instance of role by his name\n     * @method Storage#getRole\n     * @param  {String}   name Name of role\n     * @param  {Function} cb   Callback function\n     * @return {Storage}       Instance of actual storage\n     */\n\n  }, {\n    key: 'getRole',\n    value: function getRole(name, cb) {\n      this.get(name, function (err, item) {\n        if (err || !item) {\n          return cb(err, item);\n        }\n\n        if (item instanceof _Role2.default) {\n          return cb(null, item);\n        }\n\n        cb(null, null);\n      });\n\n      return this;\n    }\n\n    /**\n     * Get instance of permission by his name\n     * @method Storage#getPermission\n     * @param  {String}   action   Name of action\n     * @param  {String}   resource Name of resource\n     * @param  {Function} cb       Callback function\n     * @return {Storage}           Instance of actual storage\n     */\n\n  }, {\n    key: 'getPermission',\n    value: function getPermission(action, resource, cb) {\n      var name = _Permission2.default.createName(action, resource);\n\n      this.get(name, function (err, item) {\n        if (err || !item) {\n          return cb(err, item);\n        }\n\n        if (item instanceof _Permission2.default) {\n          return cb(null, item);\n        }\n\n        cb(null, null);\n      });\n\n      return this;\n    }\n\n    /**\n     * Return true with callback if role or permission exists\n     * @method Storage#exists\n     * @param  {String}   name Name of role or permission\n     * @param  {Function} cb   Callback function\n     * @return {Storage}       Instance of actual storage\n     */\n\n  }, {\n    key: 'exists',\n    value: function exists(name, cb) {\n      this.get(name, function (err, item) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (!item) {\n          return cb(null, false);\n        }\n\n        return cb(null, true);\n      });\n\n      return this;\n    }\n\n    /**\n     * Return true with callback if role exists\n     * @method Storage#existsRole\n     * @param  {String}   name Name of role\n     * @param  {Function} cb   Callback function\n     * @return {Storage}       Instance of actual storage\n     */\n\n  }, {\n    key: 'existsRole',\n    value: function existsRole(name, cb) {\n      this.getRole(name, function (err, item) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (!item) {\n          return cb(null, false);\n        }\n\n        return cb(null, true);\n      });\n\n      return this;\n    }\n\n    /**\n     * Return true with callback if permission exists\n     * @method Storage#existsPermission\n     * @param  {String}   name Name of permission\n     * @param  {Function} cb   Callback function\n     * @return {Storage}       Instance of actual storage\n     */\n\n  }, {\n    key: 'existsPermission',\n    value: function existsPermission(action, resource, cb) {\n      this.getPermission(action, resource, function (err, item) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (!item) {\n          return cb(null, false);\n        }\n\n        return cb(null, true);\n      });\n\n      return this;\n    }\n  }, {\n    key: 'rbac',\n    get: function get() {\n      return this._rbac;\n    },\n    set: function set(rbac) {\n      if (this._rbac) {\n        throw new Error('RBAC is already setted');\n      }\n\n      this._rbac = rbac;\n    }\n  }]);\n\n  return Storage;\n}();\n\nexports.default = Storage;","/home/travis/build/npmtest/node-npmtest-rbac/node_modules/rbac/dist/storages/Mongoose.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _values = require('lodash/values');\n\nvar _values2 = _interopRequireDefault(_values);\n\nvar _index = require('./index');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _Permission = require('../Permission');\n\nvar _Permission2 = _interopRequireDefault(_Permission);\n\nvar _Role = require('../Role');\n\nvar _Role2 = _interopRequireDefault(_Role);\n\nvar _keymirror = require('keymirror');\n\nvar _keymirror2 = _interopRequireDefault(_keymirror);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Type = (0, _keymirror2.default)({\n  PERMISSION: null,\n  ROLE: null\n});\n\nfunction createSchema(Schema) {\n  var schema = new Schema({\n    name: { type: String, required: true, unique: true },\n    type: { type: String, 'enum': (0, _values2.default)(Type), required: true },\n    grants: [String]\n  });\n\n  return schema;\n}\n\nfunction getType(item) {\n  if (item instanceof _Role2.default) {\n    return Type.ROLE;\n  } else if (item instanceof _Permission2.default) {\n    return Type.PERMISSION;\n  }\n\n  return null;\n}\n\nfunction convertToInstance(rbac, record) {\n  if (!record) {\n    throw new Error('Record is undefined');\n  }\n\n  if (record.type === Type.ROLE) {\n    return rbac.createRole(record.name, false, function () {});\n  } else if (record.type === Type.PERMISSION) {\n    var decoded = _Permission2.default.decodeName(record.name);\n    if (!decoded) {\n      throw new Error('Bad permission name');\n    }\n\n    return rbac.createPermission(decoded.action, decoded.resource, false, function () {});\n  }\n\n  throw new Error('Type is undefined');\n}\n\nvar MongooseStorage = function (_Storage) {\n  _inherits(MongooseStorage, _Storage);\n\n  function MongooseStorage() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, MongooseStorage);\n\n    var _this = _possibleConstructorReturn(this, (MongooseStorage.__proto__ || Object.getPrototypeOf(MongooseStorage)).call(this));\n\n    var connection = options.connection;\n    if (!connection) {\n      throw new Error('Parameter connection is undefined use your current mongoose connection.');\n    }\n\n    options.modelName = options.modelName || 'rbac';\n    options.Schema = options.Schema || connection.Schema;\n\n    _this._options = options;\n\n    _this._model = connection.model(options.modelName, createSchema(options.Schema));\n    return _this;\n  }\n\n  _createClass(MongooseStorage, [{\n    key: 'add',\n    value: function add(item, cb) {\n      this.model.create({\n        name: item.name,\n        type: getType(item)\n      }, function (err, obj) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (!obj) {\n          return cb(new Error('Item is undefined'));\n        }\n\n        cb(null, item);\n      });\n\n      return this;\n    }\n  }, {\n    key: 'remove',\n    value: function remove(item, cb) {\n      var _this2 = this;\n\n      var name = item.name;\n\n      this.model.update({ grants: name }, {\n        $pull: {\n          grants: name\n        }\n      }, { multi: true }, function (err) {\n        if (err) {\n          return cb(err);\n        }\n\n        _this2.model.remove({ name: name }, function (err2) {\n          if (err2) {\n            return cb(err2);\n          }\n\n          cb(null, true);\n        });\n      });\n\n      return this;\n    }\n  }, {\n    key: 'grant',\n    value: function grant(role, child, cb) {\n      var name = role.name;\n      var childName = child.name;\n\n      if (!role instanceof _Role2.default) {\n        return cb(new Error('Role is not instance of Role'));\n      }\n\n      if (name === childName) {\n        return cb(new Error('You can grant yourself'));\n      }\n\n      this.model.update({ name: name, type: Type.ROLE }, { $addToSet: { grants: childName } }, function (err) {\n        if (err) {\n          return cb(err);\n        }\n\n        cb(null, true);\n      });\n\n      return this;\n    }\n  }, {\n    key: 'revoke',\n    value: function revoke(role, child, cb) {\n      var name = role.name;\n      var childName = child.name;\n\n      this.model.update({ name: name, type: Type.ROLE }, { $pull: { grants: childName } }, function (err, num) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (num === 0) {\n          return cb(new Error('Item is not associated to this item'));\n        }\n\n        return cb(null, true);\n      });\n\n      return this;\n    }\n  }, {\n    key: 'get',\n    value: function get(name, cb) {\n      var rbac = this.rbac;\n\n      this.model.findOne({ name: name }, function (err, record) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (!record) {\n          return cb(null, null);\n        }\n\n        cb(null, convertToInstance(rbac, record));\n      });\n\n      return this;\n    }\n  }, {\n    key: 'getRoles',\n    value: function getRoles(cb) {\n      var rbac = this.rbac;\n\n      this.model.find({ type: Type.ROLE }, function (err, records) {\n        if (err) {\n          return cb(err);\n        }\n\n        var instances = records.map(function (r) {\n          return convertToInstance(rbac, r);\n        });\n\n        cb(null, instances);\n      });\n\n      return this;\n    }\n  }, {\n    key: 'getPermissions',\n    value: function getPermissions(cb) {\n      var rbac = this.rbac;\n\n      this.model.find({ type: Type.PERMISSION }, function (err, records) {\n        if (err) {\n          return cb(err);\n        }\n\n        var instances = records.map(function (r) {\n          return convertToInstance(rbac, r);\n        });\n\n        cb(null, instances);\n      });\n\n      return this;\n    }\n  }, {\n    key: 'getGrants',\n    value: function getGrants(role, cb) {\n      var _this3 = this;\n\n      var rbac = this.rbac;\n\n      this.model.findOne({ name: role, type: Type.ROLE }, function (err, record) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (!record || !record.grants.length) {\n          return cb(null, []);\n        }\n\n        _this3.model.find({\n          name: {\n            $in: record.grants\n          }\n        }, function (err2, records) {\n          if (err2) {\n            return cb(err2);\n          }\n\n          var instances = records.map(function (r) {\n            return convertToInstance(rbac, r);\n          });\n\n          cb(null, instances);\n        });\n      });\n\n      return this;\n    }\n  }, {\n    key: 'model',\n    get: function get() {\n      return this._model;\n    }\n  }, {\n    key: 'options',\n    get: function get() {\n      return this._options;\n    }\n  }]);\n\n  return MongooseStorage;\n}(_index2.default);\n\nexports.default = MongooseStorage;","/home/travis/build/npmtest/node-npmtest-rbac/node_modules/rbac/controllers/express.js":"'use strict';\n\nvar WebError = require('web-error').default;\n\n/**\n * Return middleware function for permission check\n * @param  {RBAC}    rbac              Instance of RBAC\n * @param  {String}  action            Name of action\n * @param  {String}  resource          Name of resource\n * @param  {String}  redirect          Url where is user redirected when he has no permissions\n * @param  {Number}  redirectStatus    Status code of redirect action\n * @return {Function}                  Middleware function\n */\nexports.can = function(rbac, action, resource, redirect, redirectStatus) {\n  redirectStatus = redirectStatus || 302;\n\n  return function(req, res, next) {\n    if(!req.user) {\n      return next(new WebError(401));\n    }\n\n    req.user.can(rbac, action, resource, function(err, can) {\n      if(err) {\n        return next(err);\n      }\n\n      if(!can) {\n        if(redirect) {\n          return res.redirect(redirectStatus, redirect);\n        }\n\n        return next(new WebError(401));\n      }\n\n      next();\n    });\n  };\n};\n\n/**\n * Return middleware function for permission check\n * @param  {RBAC}  rbac                Instance of RBAC\n * @param  {String}  name              Name of role\n * @param  {String}  redirect          Url where is user redirected when he has no permissions\n * @param  {Number}  redirectStatus    Status code of redirect action\n * @return {Function}                  Middleware function\n */\nexports.hasRole = function(rbac, name, redirect, redirectStatus) {\n  redirectStatus = redirectStatus || 302;\n\n  return function(req, res, next) {\n    if(!req.user) {\n      return next(new WebError(401));\n    }\n\n    req.user.hasRole(rbac, name, function(err, has) {\n      if(err) {\n        return next(err);\n      }\n\n      if(!has) {\n        if(redirect) {\n          return res.redirect(redirectStatus, redirect);\n        }\n\n        return next(new WebError(401));\n      }\n\n      next();\n    });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-rbac/node_modules/rbac/gulpfile.js":"import jsdoc from 'gulp-jsdoc3';\nimport gulp from 'gulp';\nimport babel from 'gulp-babel';\nimport config from './jsdocConfig';\n\ngulp.task('doc', (cb) => {\n  return gulp.src('./src/**/*.js')\n    .pipe(babel())\n    .pipe(jsdoc(config, cb));\n});\n\ngulp.task('build', () => {\n  return gulp.src('./src/**/*.{js,jsx}')\n    .pipe(babel())\n    .pipe(gulp.dest('./dist'));\n});\n","/home/travis/build/npmtest/node-npmtest-rbac/node_modules/rbac/jsdocConfig.js":"export default {\n  \"tags\": {\n    \"allowUnknownTags\": true\n  },\n  \"opts\": {\n    \"destination\": \"./docs/gen\"\n  },\n  \"plugins\": [\n    \"plugins/markdown\"\n  ],\n};\n/*\n  opts: {\n    destination: './documentation',\n  },\n  templates: {\n    //path: 'node_modules/jaguarjs-jsdoc',\n  },\n};\n*/\n"}